#Part 1 Metagenomics 

#Step 1 download samples 
#download samples from: https://www.ncbi.nlm.nih.gov/bioproject/PRJNA1119528 
#I used sample 1, 26, and 55

#Step 2 make new directories for project and upload samples to cluster 
mkdir final_proj 
cd final_proj/
mkdir sample_1 
cd sample_1 
mkdir fastqc
mkdir kraken 
mkdir humann2
#use filezilla to upload sample 1 fastq file into ~/final_proj/sample_1/fastqc

#step 3 run fastqc to assess quality of sample 
cd fastqc
module load fastqc/0.12.1
gunzip SRR29267809.fastq 
fastqc SRR29267809.fastq 
#use filezilla to tranfer output file and open to see report 

#step 4 run kraken on sample for taxonomy report file 
cd ..
cd kraken 
cp /home/FCAM/mcb5631/classFiles/kraken_SMCA24.sh . 
nano kraken_SMCA24.sh 
#change email 
#change file used to SRR29267809.fastq 
#delete zip file command since not a zipped file 
#delete mpa style command to make output compatible for krona 
#save batch script under new name kraken_SMCA24_1.sh

#run batch script on head node
exit 
cd final_proj/sample_1/
sbatch kraken/kraken_SMCA24_1.sh 

#step 5 krona for taxonomic visualization (download KronaTools, update it, and run on kraken output file)
cd final_proj/sample_1/kraken
curl -LOk https://github.com/marbl/Krona/releases/download/v2.7/KronaTools-2.7.tar
tar -xvf KronaTools-2.7.tar
cd KronaTools-2.7
./install.pl --prefix /home/FCAM/mcb5631/usr28/final_proj/sample_1/kraken/KronaTools-2.7
./updateTaxonomy.sh
cd scripts/
./ImportTaxonomy.pl -t 5 -m 3 -o kraken_tr.krona.html /home/FCAM/mcb5631/usr28/final_proj/sample_1/kraken/kraken_report.txt
#use filezilla to view output file and look at taxonomy 

#step 6 identifying gene function with humann2 
cd ~
cd final_proj/sample_1/humann2
cp /home/FCAM/mcb5631/classFiles/humann2Batch_SMCA.sh . 
nano humann2Batch_SMCA.sh 
#edit email, add path to sample_1 fastq file, and change name of output file to humann2_sample_1

exit # run on head node 
cd final_proj/sample_1/
sbatch humann2/humann2Batch_SMCA_S1.sh
#view parts of output file to assess gene function 

#repeat steps 2 through 6 for samples 2 and 3 

#Part 2 Phyloseq 

#step 7 convert kraken_report.txt files into .biom files 

#create conda enviornment to install kraken-biom, a program that converts .txt to .biom 
conda create -n kraken-biom-env
conda activate kraken-biom-env
conda install -c conda-forge biom-format
#creates directory biom-format in final_proj

#once installed rename kraken_report.txt to unique name for each sample 
cd ~/final_proj/sample_1/kraken 
mv kraken_report.txt kraken_report1.txt #repeat for samples 2 and 3 

#lets convert to .biom 
cd ..
cd biom-format/
cp kraken_report1.txt .
cp kraken_report2.txt .
cp kraken_report3.txt .
kraken-biom kraken_report1.txt kraken_report2.txt kraken_report3.txt -o allsample.biom #make sure to do all reports in same file 

#step 8 format .biom file for use in phyloseq 
#from this point you can choose to use R on the cluster or in RStudio, I choose to use RStudio 
#exit from cluster and load up RStudio 
#use filezilla to move allsample.biom into computer perferable a folder, I used a mcb5631 folder 
#set working directory in RStudio to folder allsample.biom is in 

#install packages that may not be already loaded 

if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("phyloseq")
BiocManager::install("biomformat")

#load necessary packages 
library("phyloseq")
library("biomformat")
library("ggplot2")
library("RColorBrewer")

#create a variable with .biom file 
gut_sample<- import_biom("~/MCB5631/allsample.biom")

#remove unnecessary characters (ex. g__Roseburia to Roseburia)
gut_sample@tax_table@.Data <- substring(gut_sample@tax_table@.Data, 4) 
#add taxonomic heirarchy as column names 
colnames(gut_sample@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")

#step 9 create alpha diversity plots 
#remove organisms that are not bacteria 
gut_sample<- subset_taxa(gut_sample, Kingdom == "Bacteria")
#create plots
alpha_plot<-plot_richness(physeq = gut_sample, 
              measures = c("Chao1","Shannon"))+
  xlab("") 
#can do other alpha diversity metrics as well 

#step 10 convert assigned reads to percentages for abundance comparisons (beta-diversity)
#remove any unidentified samples from genus level
gut_sample <- subset_taxa(gut_sample, Genus != "")
#transform to percentages 
gut_percent<- transform_sample_counts(gut_sample, function(x) x*100/sum(x))

#step 11 create beta diversity plots 
#two step process to compare samples
gut_NMDS<- ordinate(physeq = gut_percent, method = "NMDS", 
                       distance = "bray")

beta_plot<-plot_ordination(gut_percent, gut_NMDS)+
  theme_classic()

#step 12 create relative abundance plot at phylum level 

gut_glom <- tax_glom(gut_percent, taxrank = 'Phylum')
#creates data frame so phyloseq data can work with ggplot 
gut_df <- psmelt(gut_glom)

gut_df$Phylum<- as.factor(gut_df$Phylum)
colors_rel<- colorRampPalette(brewer.pal(8,"Pastel2")) (length(levels(gut_df$Phylum)))
rel_plot<-ggplot(gut_df, aes(x=Sample,y=Abundance, fill=Phylum))+
  geom_bar(aes(), stat="identity", position="stack")+
  scale_fill_manual(values = colors_rel)+
  theme_classic()+
  xlab("")+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

#step 13 create relative adundance plot for genera of family Lachnospiraceae

#create table for just Lachnospiraceae
lac<- subset_taxa(gut_sample, Family == "Lachnospiraceae")

#create abundances and sample just genus level 
lac_per<-transform_sample_counts(lac, function(x) x*100/sum(x))
lac_glom<- tax_glom(lac_per, taxrank= "Genus")

lac_df<- psmelt(lac_glom)
#anything under abundance of 5 becomes one color on plot 
lac_df$Genus[lac_df$Abundance < 5] <-"Genera < 5.0 abund"
lac_df$Genus<- as.factor(lac_df$Genus)

gen_color_lac<- colorRampPalette(brewer.pal(8, "Pastel2")) (length(levels(lac_df$Genus)))

plot_lac<- ggplot(lac_df, aes(x=Sample, y=Abundance, fill=Genus))+
  geom_bar(aes(), stat="identity", position="stack")+
  #scale_fill_manual(values = gen_color_lac)+
  theme_classic()+
  xlab("")+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

#part 3 mirix 

#step 14 compute responses to vancomycon for each phylum in all 3 samples 

devtools::install_github("PennChopMicrobiomeProgram/mirix")
library(mirix)
library(tidyverse)

#assign suceptibilty to every phylum in each sample to vancomycin  
gut_df_vanc<- gut_df %>%
  group_by(Sample) %>%
  summarise(vanc = mirix_vancomycin(Abundance, Phylum), .groups="drop")

#step 15 create graph of mirix values for vancomycin response for each sample 
gut_df_vanc %>%
  ggplot(aes(x=Sample, y=vanc))+
  geom_point(size=3, color=c('plum','salmon','steelblue'))+
  labs(x = "", y = "Vancomycin-specific index")+
  theme_classic()

#step 16 predict suceptibility to vancomycon for genera in sample 1 

#create variable for genera of just sample 1 and calculate susceptibility to vancomycin for each genus 
sample1 <- gut_fam_df %>% 
  filter(Sample %in% "kraken_report1")%>%
  mutate(taxon = fct_reorder(Genus, Abundance)) %>%
  mutate(susceptibility = antibiotic_susceptibility_vancomycin(Genus))

#remove all genera except for 35 most abundant 
sample1<-sample1[-c(36:942),]

#create graph for suceptibility of top 35 most abundant genera in sample 1 
sample1 %>%
  ggplot(aes(x = Abundance, y = taxon, shape = susceptibility)) +
  geom_point() +
  scale_shape_manual(values = c(1, 19), na.value = 3)+
  theme_classic()+
  ylab("Genus")+
  ggtitle('Top 35 Genera of Report1s Susceptibility to Vancomycin')+
  theme(plot.title = element_text(size = 10))
